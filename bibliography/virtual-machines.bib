@inproceedings{Agesen:VMexit-Avoid:2012,
  author    = {Agesen, Ole and Mattson, Jim and Rugina, Radu and Sheldon, Jeffrey},
  title     = {Software Techniques for Avoiding Hardware Virtualization Exits},
  year      = {2012},
  booktitle = {Proceedings of the 2012 USENIX Conference on Annual Technical Conference},
  abstract  = {On modern processors, hardware-assisted virtualization outperforms binary translation for most workloads. But hardware virtualization has a potential problem: virtualization exits are expensive. While hardware virtualization executes guest instructions at native speed, guest/VMM transitions can sap performance. Hardware designers attacked this problem both by reducing guest/VMM transition costs and by adding architectural extensions such as nested paging support to avoid exits.This paper proposes complementary software techniques for reducing the exit frequency. In the simplest form, our VMM inspects guest code dynamically to detect back-to-back pairs of instructions that both exit. By handling a pair of instructions when the first one exits, we save 50\% of the transition costs. Then, we generalize from pairs to clusters of instructions that may include loops and other control flow. We use a binary translator to generate, and cache, custom translations for handling exits. The analysis cost is paid once, when the translation is generated, but amortized over all future executions.Our techniques have been fully implemented and validated in recent versions of VMware products. We show that clusters consistently reduce the number of exits for all examined workloads. When execution is dominated by exit costs, this translates into measurable runtime improvements. Most importantly, clusters enable substantial gains for nested virtual machines, delivering speedups as high as 1.52\texttimes{}. Intuitively, this result stems from the fact that transitions between the inner guest and VMM are extremely costly, as they are implemented in software by the outer VMM.},
  address   = {USA},
  location  = {Boston, MA},
  numpages  = {1},
  pages     = {35},
  publisher = {USENIX Association},
  series    = {USENIX ATC'12},
}

@inproceedings{Ben-Yehuda:Turtles:2010,
  author    = {Ben-Yehuda, Muli and Day, Michael D. and Dubitzky, Zvi and Factor, Michael and Har El, Nadav and Gordon, Abel and Liguori, Anthony and Wasserman, Orit and Yassour, Ben-Ami},
  title     = {The Turtles Project: Design and Implementation of Nested Virtualization},
  year      = {2010},
  booktitle = {9th USENIX Symposium on Operating Systems Design and Implementation, OSDI 2010,  October 4-6, 2010, Vancouver, BC, Canada, Proceedings},
  citedby   = {0},
  cites     = {0},
  editor    = {Remzi H. Arpaci-Dusseau and Brad Chen},
  isbn      = {978-1-931971-79-9},
  pages     = {423-436},
  publisher = {USENIX Association},
  researchr = {https://researchr.org/publication/Ben-YehudaDDFHGLWY10},
  tags      = {design},
  url       = {http://www.usenix.org/events/osdi10/tech/full_papers/Ben-Yehuda.pdf},
}

@article{Bugnion:VMware:2012,
  author     = {Bugnion, Edouard and Devine, Scott and Rosenblum, Mendel and Sugerman, Jeremy and Wang, Edward Y.},
  title      = {Bringing Virtualization to the X86 Architecture with the Original VMware Workstation},
  year       = {2012},
  journal    = {ACM Trans. Comput. Syst.},
  abstract   = {This article describes the historical context, technical challenges, and main implementation techniques used by VMware Workstation to bring virtualization to the x86 architecture in 1999. Although virtual machine monitors (VMMs) had been around for decades, they were traditionally designed as part of monolithic, single-vendor architectures with explicit support for virtualization. In contrast, the x86 architecture lacked virtualization support, and the industry around it had disaggregated into an ecosystem, with different vendors controlling the computers, CPUs, peripherals, operating systems, and applications, none of them asking for virtualization. We chose to build our solution independently of these vendors.As a result, VMware Workstation had to deal with new challenges associated with (i) the lack of virtualization support in the x86 architecture, (ii) the daunting complexity of the architecture itself, (iii) the need to support a broad combination of peripherals, and (iv) the need to offer a simple user experience within existing environments. These new challenges led us to a novel combination of well-known virtualization techniques, techniques from other domains, and new techniques.VMware Workstation combined a hosted architecture with a VMM. The hosted architecture enabled a simple user experience and offered broad hardware compatibility. Rather than exposing I/O diversity to the virtual machines, VMware Workstation also relied on software emulation of I/O devices. The VMM combined a trap-and-emulate direct execution engine with a system-level dynamic binary translator to efficiently virtualize the x86 architecture and support most commodity operating systems. By relying on x86 hardware segmentation as a protection mechanism, the binary translator could execute translated code at near hardware speeds. The binary translator also relied on partial evaluation and adaptive retranslation to reduce the overall overheads of virtualization.Written with the benefit of hindsight, this article shares the key lessons we learned from building the original system and from its later evolution.},
  address    = {New York, NY, USA},
  articleno  = {12},
  doi        = {10.1145/2382553.2382554},
  issn       = {0734-2071},
  issue_date = {November 2012},
  keywords   = {hypervisors, VMM, virtual machine monitors, x86, dynamic binary translation, Virtualization},
  month      = {nov},
  number     = {4},
  numpages   = {51},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/2382553.2382554},
  volume     = {30},
}

@article{Popek:VM-Requirements:1974,
  author     = {Popek, Gerald J. and Goldberg, Robert P.},
  title      = {Formal Requirements for Virtualizable Third Generation Architectures},
  year       = {1974},
  journal    = {Commun. ACM},
  abstract   = {Virtual machine systems have been implemented on a limited number of third generation computer systems, e.g. CP-67 on the IBM 360/67. From previous empirical studies, it is known that certain third generation computer systems, e.g. the DEC PDP-10, cannot support a virtual machine system. In this paper, model of a third-generation-like computer system is developed. Formal techniques are used to derive precise sufficient conditions to test whether such an architecture can support virtual machines.},
  address    = {New York, NY, USA},
  doi        = {10.1145/361011.361073},
  issn       = {0001-0782},
  issue_date = {July 1974},
  keywords   = {virtual memory, abstract model, formal requirements, operating system, hypervisor, virtual machine monitor, proof, sensitive instruction, virtual machine, third generation architecture},
  month      = {jul},
  number     = {7},
  numpages   = {10},
  pages      = {412-421},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/361011.361073},
  volume     = {17},
}

@inproceedings{Petsas:Android-VM-Detection:2014,
  author    = {Petsas, Thanasis and Voyatzis, Giannis and Athanasopoulos, Elias and Polychronakis, Michalis and Ioannidis, Sotiris},
  title     = {Rage against the Virtual Machine: Hindering Dynamic Analysis of Android Malware},
  year      = {2014},
  booktitle = {Proceedings of the Seventh European Workshop on System Security},
  abstract  = {Antivirus companies, mobile application marketplaces, and the security research community, employ techniques based on dynamic code analysis to detect and analyze mobile malware. In this paper, we present a broad range of anti-analysis techniques that malware can employ to evade dynamic analysis in emulated Android environments. Our detection heuristics span three different categories based on (i) static properties, (ii) dynamic sensor information, and (iii) VM-related intricacies of the Android Emulator. To assess the effectiveness of our techniques, we incorporated them in real malware samples and submitted them to publicly available Android dynamic analysis systems, with alarming results. We found all tools and services to be vulnerable to most of our evasion techniques. Even trivial techniques, such as checking the value of the IMEI, are enough to evade some of the existing dynamic analysis frameworks. We propose possible countermeasures to improve the resistance of current dynamic analysis tools against evasion attempts.},
  address   = {New York, NY, USA},
  articleno = {5},
  doi       = {10.1145/2592791.2592796},
  isbn      = {9781450327152},
  location  = {Amsterdam, The Netherlands},
  numpages  = {6},
  publisher = {Association for Computing Machinery},
  series    = {EuroSec '14},
  url       = {https://doi.org/10.1145/2592791.2592796},
}
